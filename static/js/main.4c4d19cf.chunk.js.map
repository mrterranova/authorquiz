{"version":3,"sources":["AuthorQuiz.js","serviceWorker.js","AddAuthorForm.js","index.js"],"names":["Hero","className","Book","title","onClick","Turn","author","books","highlight","onAnswerSelected","style","backgroundColor","highlightToBgColor","src","imageUrl","alt","map","key","Continue","show","onContinue","Footer","href","AuthorQuiz","turnData","to","Boolean","window","location","hostname","match","AuthorForm","props","state","name","bookTemp","onFieldChange","bind","handleSubmit","handleAddBook","event","preventDefault","this","onAddAuthor","setState","target","value","concat","onSubmit","htmlFor","type","onChange","book","React","Component","AddAuthorForm","authors","imageSource","getTurnData","allBooks","reduce","p","c","i","fourRandomBooks","shuffle","slice","answer","sample","find","some","resetState","isCorrect","render","App","AuthorWrapper","withRouter","history","push","ReactDOM","basename","pathname","Fragment","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c4d19cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\nimport './App.css';\r\nimport './bootstrap.min.css'\r\n\r\nfunction Hero(){\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"jumbotron col-10 offset-1\">\r\n        <h1>The Author Quiz</h1>\r\n        <p>Select the book written by the author shown</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Book({title, onClick}) {\r\n  return(\r\n    <div className=\"answer\" onClick ={() => {onClick(title);}}>\r\n      <h4>{title}</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Turn({author, books, highlight, onAnswerSelected}){\r\n  function highlightToBgColor(highlight){\r\n    const mapping = {\r\n      'none': '',\r\n      'correct': 'green', \r\n      'wrong': 'red'\r\n    };\r\n    return mapping[highlight];\r\n  }\r\n  \r\n  return(\r\n    <div className=\"row turn\" style={{backgroundColor: highlightToBgColor(highlight)}}>\r\n      <div className=\"col-4 offset-1\">\r\n        <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\" />\r\n      </div>\r\n    <div className=\"col-6\">\r\n      {books.map((title)=> <Book title={title} key={title} onClick={onAnswerSelected} />)}\r\n    </div>\r\n    </div>);\r\n}\r\n\r\nTurn.propTypes = {\r\n  author: PropTypes.shape({\r\n    name: PropTypes.string.isRequired, \r\n    imageUrl: PropTypes.string.isRequired, \r\n    imageSource: PropTypes.string.isRequired,\r\n    books: PropTypes.arrayOf(PropTypes.string).isRequired\r\n  }), \r\n  books: PropTypes.arrayOf(PropTypes.string).isRequired, \r\n  onAnswerSelected: PropTypes.func.isRequired, \r\n  highlight: PropTypes.string.isRequired\r\n}\r\n\r\nfunction Continue({show, onContinue}) {\r\n  return(\r\n   <div className=\"row continue\">\r\n     {show \r\n     ? <div className=\"col-11\">\r\n        <button className=\"btn btn-success btn-lg float-right\" onClick={onContinue}>Continue</button>\r\n     </div> : null}\r\n   </div>\r\n  );\r\n}\r\n\r\nfunction Footer() {\r\n  return(\r\n    <div>\r\n      <p>\r\n        All images are from <a href=\"http://commons.wikimedia.org\"> Wikimedia Commons</a>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction AuthorQuiz ({turnData, highlight, onAnswerSelected, onContinue}){\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <Hero />\r\n        <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected}/>\r\n        <Continue show={highlight==='correct'} onContinue={onContinue}/>\r\n        <p><Link to=\"/add\" >Add Author Here!</Link></p>\r\n        <Footer />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default AuthorQuiz;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport \"./AddAuthorForm.css\"\r\n\r\nclass AuthorForm extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name : '',\r\n            imageUrl : '', \r\n            books: [], \r\n            bookTemp: ''\r\n        };\r\n        this.onFieldChange = this.onFieldChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleAddBook = this.handleAddBook.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.onAddAuthor(this.state);\r\n    }\r\n\r\n    onFieldChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleAddBook(event) {\r\n        this.setState({\r\n            books: this.state.books.concat([this.state.bookTemp]), \r\n            bookTemp: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n            return <form onSubmit={this.handleSubmit}>\r\n            <div className=\"AddAuthorForm__input\">\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onFieldChange} />\r\n            </div>\r\n            <div className=\"AddAuthorForm__input\">\r\n                <label htmlFor=\"imageUrl\">image</label>\r\n                <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} onChange={this.onFieldChange} />\r\n            </div>\r\n            <div className=\"AddAuthorForm__input\">\r\n                <label htmlFor=\"bookTemp\">Books</label>\r\n                {this.state.books.map((book)=><p key={book}>{book}</p>)}\r\n                <input type=\"text\" name=\"bookTemp\" value={this.state.bookTemp} onChange={this.onFieldChange} />\r\n                <input type=\"button\" value=\"+\" onClick={this.handleAddBook} />\r\n            </div>\r\n            <input type=\"submit\" value=\"Add\" />\r\n        </form>\r\n    }\r\n}\r\n\r\nfunction AddAuthorForm({match, onAddAuthor}){\r\n    return <div className=\"AddAuthorForm\">\r\n      <h1>Add Author</h1>\r\n      <AuthorForm onAddAuthor={onAddAuthor}/>\r\n    </div>\r\n  }\r\n\r\n  export default AddAuthorForm;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route, withRouter} from 'react-router-dom'\r\nimport './index.css';\r\nimport AuthorQuiz from './AuthorQuiz';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {shuffle, sample} from 'underscore';\r\nimport AddAuthorForm from './AddAuthorForm';\r\nconst authors = [\r\n  {\r\n    name: 'Charles Dickens',\r\n    imageUrl: \"images/authors/charlesdickens.png\",\r\n    imageSource: \"Wikimedia Commons\",\r\n    books: ['David Copperfield', 'A Tale of Two Cities', 'Great Expectations']\r\n  },\r\n  {\r\n    name: 'Stephen King',\r\n    imageUrl: \"images/authors/stephenking.jpg\",\r\n    imageSource: \"Wikimedia Commons\",\r\n    books: ['The Dome', 'IT', 'The Shining']\r\n  },\r\n  {\r\n    name: 'Ayn Rand',\r\n    imageUrl: \"images/authors/aynrand.jpg\",\r\n    imageSource: \"Wikimedia Commons\",\r\n    books: ['Atlas Shrugged', 'Fountainhead', 'Anthem']\r\n  },\r\n  {\r\n    name: 'Jane Austen',\r\n    imageUrl: \"images/authors/janeausten.jpg\",\r\n    imageSource: \"Wikimedia Commons\",\r\n    books: ['Pride and Prejudice', 'Sense and Sensibility', 'Emma']\r\n  },\r\n  {\r\n    name: 'William Shakespeare',\r\n    imageUrl: \"images/authors/williamshakespeare.jpg\",\r\n    imageSource: \"Wikimedia Commons\",\r\n    books: ['Hamlet', 'Othello', 'MacBeth']\r\n  }\r\n];\r\nfunction getTurnData(authors) {\r\n  const allBooks = authors.reduce(function (p, c, i) {\r\n    return p.concat(c.books)\r\n  }, []);\r\n  const fourRandomBooks = shuffle(allBooks).slice(0,4);\r\n  const answer = sample(fourRandomBooks);\r\n\r\n  return {\r\n    books: fourRandomBooks, \r\n    author : authors.find((author)=> \r\n      author.books.some((title)=>\r\n      title === answer))\r\n  }\r\n}\r\n\r\nfunction resetState() {\r\n  return {\r\n    turnData: getTurnData(authors),\r\n    highlight: ''\r\n  }\r\n}\r\n\r\nlet state = resetState();\r\n\r\nfunction onAnswerSelected(answer) {\r\n  const isCorrect = state.turnData.author.books.some((book) => book === answer);\r\n  state.highlight = isCorrect ? 'correct' : 'wrong';\r\n  render();\r\n}\r\n\r\nfunction App() {\r\n  return <AuthorQuiz {...state} \r\n  onAnswerSelected = {onAnswerSelected}\r\n  onContinue={() =>{\r\n    state = resetState();\r\n    render();\r\n  }}/>\r\n}\r\n\r\nconst AuthorWrapper = withRouter(({ history }) =>\r\n<AddAuthorForm onAddAuthor={author =>{\r\n    authors.push(author);\r\n    history.push('/')\r\n  }} />\r\n);\r\nfunction render(){\r\nReactDOM.render(\r\n    <BrowserRouter basename={window.location.pathname || ''}>\r\n      <React.Fragment>\r\n        <Route exact path=\"/\" component={App} />\r\n        <Route path=\"/add\" component={AuthorWrapper} />\r\n      </React.Fragment>\r\n    </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n}\r\n\r\nrender();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}